---
## VARS
# vm_utils_terraform_state (alias=state) - The state of the VMs.
# "create" creates the VMs, "recreate" removes the VMs and creates them again, "destroy" removes the VMs and aborts the play. Default: "create"
# vm_utils_terraform_project_path - The path to the Terraform project. Default: "{{ lookup('env', 'PWD') + '/terraform' }}"
# vm_utils_terraform_vars_files - The path to the Terraform variables files. Default: "{{ lookup('env', 'PWD') + '/terraform/vars/vars.tfvars' }}"
# vm_utils_terraform_env (alias=env) - The environment. Default: "demo"
# vm_utils_terraform_provider (alias=provider) - The provider. Default: "libvirt"
# vm_utils_terraform_workspace (alias=workspace) - The Terraform workspace. Default: "provider-env"
# vm_utils_terraform_wait_for_connection (alias=wait_for_connection) - Wait for the connection. Default: true
##
## SHORTCUTS (takes precedence over vm_utils_terraform_*)
# state - vm_utils_terraform_state
# env - vm_utils_terraform_env
# provider - vm_utils_terraform_provider
# workspace - vm_utils_terraform_workspace
# wait_for_connection - vm_utils_terraform_wait_for_connection
##
## DEPENDENCIES
# Provider can be dynamically set in diademiemi.vm_utils.terraform_inv_mgt
# If done in the same play, vars carry over to this playbook.
##

# Please read the vars in the second play for more documentation
- name: Create / Destroy VMs
  hosts: localhost
  vars:
    # Both "vm_utils_terraform_state" or just "state" can be used to set the state of the VMs
    # STATE
    # Defaults to create. Can be set to recreate or destroy
    # Can be overwritten with vm_utils_terraform_state or state
    _vm_utils_terraform_state: "{{ state | default(_state) }}"
    _state: "{{ vm_utils_terraform_state | default('create') }}"
    # ENVIRONMENT
    # Defaults to demo
    # Can be overwritten with vm_utils_terraform_env or env
    _vm_utils_terraform_env: "{{ env | default(_env) }}"
    _env: "{{ vm_utils_terraform_env | default('demo') }}"
    # PROVIDER
    # Defaults to libvirt
    # Can be overwritten with vm_utils_terraform_provider or provider
    _vm_utils_terraform_provider: "{{ provider | default(_provider) }}"
    _provider: "{{ vm_utils_terraform_provider | default('libvirt') }}"
    # PROJECT PATH
    # Defaults to ${PWD}/terraform/infra/provider/, e.g. ./terraform/infra/libvirt/
    # Can be overwritten with vm_utils_terraform_project_path
    _vm_utils_terraform_project_path: "{{ vm_utils_terraform_project_path | default(_project_path) }}"
    _project_path: "{{ lookup('env', 'PWD') + '/terraform/infra/' + _vm_utils_terraform_provider + '/' }}"
    # VARIABLES FILES
    # Defaults to ${PWD}/terraform/vars/${ENV}.tfvars, e.g. ./terraform/vars/dev.tfvars
    # Can be overwritten with vm_utils_terraform_vars_files
    _vm_utils_terraform_vars_files: "{{ vm_utils_terraform_vars_files | default(_vars_files) }}"
    _vars_files: "{{ lookup('env', 'PWD') + '/tfvars/infra/' +
      _vm_utils_terraform_provider + '/' + _vm_utils_terraform_env + '.tfvars' }}"
    # WORKSPACE
    # Defaults to provider-env, e.g. libvirt-dev
    # Can be overwritten with vm_utils_terraform_workspace or workspace
    _vm_utils_terraform_workspace: "{{ workspace | default(_workspace) }}"
    _workspace: "{{ vm_utils_terraform_workspace | default(_vm_utils_terraform_provider~'-'~_vm_utils_terraform_env) }}"
  tasks:
    ###
    # This play deploys or removes the VMs
    # _vm_utils_terraform_state "create" creates the VMs
    # _vm_utils_terraform_state "recreate" removes the VMs and creates them again
    # _vm_utils_terraform_state "destroy" removes the VMs and aborts the play
    ###
    - name: Create or destroy VMs
      delegate_to: localhost
      run_once: true
      block:
        - name: Return information about the VMs
          ansible.builtin.debug:
            msg: |
              VMs will be {{ _vm_utils_terraform_state }}d
              Terraform project path is {{ _vm_utils_terraform_project_path }}
              Terraform variables files are {{ _vm_utils_terraform_vars_files }}

        - name: Remove VMs
          cloud.terraform.terraform:
            project_path: "{{ _vm_utils_terraform_project_path }}"
            state: absent
            force_init: true
            variables_files: "{{ _vm_utils_terraform_vars_files }}"
            workspace: "{{ _vm_utils_terraform_workspace }}"
          register: terraform_destroy
          when: _vm_utils_terraform_state | default("create") == "recreate" or _vm_utils_terraform_state | default("create") == "destroy"

        - name: Create VMs
          cloud.terraform.terraform:
            project_path: "{{ _vm_utils_terraform_project_path }}"
            state: present
            force_init: true
            variables_files: "{{ _vm_utils_terraform_vars_files }}"
            workspace: "{{ _vm_utils_terraform_workspace }}"
          register: terraform
          when: _vm_utils_terraform_state | default("create") == "create" or _vm_utils_terraform_state | default("create") == "recreate"

        - name: Set facts
          ansible.builtin.set_fact:
            terraform: "{{ terraform_destroy }}"
          when: _vm_utils_terraform_state | default("create") == "destroy"

        - name: Refresh inventory
          ansible.builtin.meta: refresh_inventory

- name: Wait for connection
  hosts: all
  gather_facts: false
  vars:
    # WAIT FOR CONNECTION
    # Defaults to true
    # Can be overwritten with vm_utils_terraform_wait_for_connection or wait_for_connection
    _vm_utils_terraform_wait_for_connection: "{{ wait_for_connection | default(_wait_for_connection) }}"
    _wait_for_connection: "{{ vm_utils_terraform_wait_for_connection | default(true) }}"
  tasks:
    - name: Wait for SSH
      ansible.builtin.wait_for_connection:
        delay: 5
        timeout: 300
      retries: 60
      delay: 3
      register: wait_for_connection
      until: wait_for_connection is succeeded
      when:
        - inventory_hostname != 'localhost'
        - _vm_utils_terraform_state | default("create") == "create" or _vm_utils_terraform_state | default("create") == "recreate"
        - _vm_utils_terraform_wait_for_connection

...
